{"version":3,"sources":["src/services/Intl-support.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH;;;;;GAKG;AACH;IAEI;;;;;OAKG;IACH,OAAc,cAAc,CAAC,aAAqB;QAE9C,wBAAwB;QACxB,IAAI,CAAC;YAED,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QAE9D,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAET,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAEhB,CAAC;IAED;;;;;OAKG;IACH,OAAc,YAAY,CAAC,aAAqB;QAE5C,wBAAwB;QACxB,IAAI,CAAC;YAED,IAAI,CAAC,GAAW,CAAC,CAAC;YAElB,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEnD,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAET,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAEhB,CAAC;IAED;;;;;OAKG;IACH,OAAc,QAAQ,CAAC,IAAY;QAE/B,wBAAwB;QACxB,IAAI,CAAC;YAED,IAAI,MAAM,GAAW,GAAG,CAAC;YACzB,IAAI,MAAM,GAAW,GAAG,CAAC;YAEzB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAEpD,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAET,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAEhB,CAAC;AAEL,CAAC;AAAA","file":"src/services/Intl-support.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\n/**\r\n * IntlSupport class.\r\n * Provides the methods to check if Intl is supported.\r\n * \r\n * @author Roberto Simonetti\r\n */\r\nexport class IntlSupport {\r\n\r\n    /**\r\n     * Support for dates.\r\n     * \r\n     * @param defaultLocale The default locale\r\n     * @return True if the browser supports locales for dates, otherwise false.\r\n     */\r\n    public static DateTimeFormat(defaultLocale: string): boolean {\r\n\r\n        // Checking for support.\r\n        try {\r\n\r\n            new Intl.DateTimeFormat(defaultLocale).format(new Date());\r\n\r\n        } catch (e) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Support for numbers.\r\n     * \r\n     * @param defaultLocale The default locale\r\n     * @return True if the browser supports locales for numbers, otherwise false.\r\n     */\r\n    public static NumberFormat(defaultLocale: string): boolean {\r\n\r\n        // Checking for support.\r\n        try {\r\n\r\n            var n: number = 0;\r\n\r\n            new Intl.NumberFormat(defaultLocale).format(n);\r\n\r\n        } catch (e) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Support for Collator.\r\n     * \r\n     * @param lang The current language code\r\n     * @return True if the browser supports Collator, otherwise false.\r\n     */\r\n    public static Collator(lang: string): boolean {\r\n\r\n        // Checking for support.\r\n        try {\r\n\r\n            var value1: string = \"a\";\r\n            var value2: string = \"b\";\r\n\r\n            new Intl.Collator(lang).compare(value1, value2);\r\n\r\n        } catch (e) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}