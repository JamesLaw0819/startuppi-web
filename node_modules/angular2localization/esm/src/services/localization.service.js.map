{"version":3,"sources":["src/services/localization.service.ts"],"names":[],"mappings":"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","file":"src/services/localization.service.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\n\r\n// Services.\r\nimport { LocaleService } from './locale.service';\r\nimport { IntlSupport } from './Intl-support';\r\n\r\n/**\r\n * LocalizationService class.\r\n * Gets the translation data and performs operations.\r\n * \r\n * Direct loading.\r\n * \r\n * To initialize LocalizationService for the direct loading, add the following code in the body of constructor of the route component:\r\n *\r\n * var translationEN = {\r\n *      TITLE: 'Angular 2 Localization',\r\n *      CHANGE_LANGUAGE: 'Change language',\r\n *      ...\r\n * }\r\n * // Add a new translation here.\r\n * \r\n * // Required: adds a new translation with the given language code.\r\n * this.localization.addTranslation('en', translationEN);\r\n * // Add a new translation with the given language code here.\r\n * this.localization.updateTranslation(); // Need to update the translation.\r\n * \r\n * Asynchronous loading.\r\n * \r\n * To initialize LocalizationService for the asynchronous loading, add the following code in the body of constructor of the route component:\r\n * \r\n * // Required: initializes the translation provider with the given path prefix.\r\n * this.localization.translationProvider('./resources/locale-');\r\n * this.localization.updateTranslation(); // Need to update the translation.\r\n * \r\n * and create the json files of the translations such as 'locale-en.json':\r\n * \r\n * {\r\n *     \"TITLE\": \"Angular 2 Localization\",\r\n *     \"CHANGE_LANGUAGE\": \"Change language\",\r\n *     ...\r\n * }\r\n * \r\n * @author Roberto Simonetti\r\n */\r\n@Injectable() export class LocalizationService {\r\n\r\n    /**\r\n     * The language code for the service.\r\n     */\r\n    public languageCode: string;\r\n\r\n    /**\r\n     * The loading mode for the service.\r\n     */\r\n    public loadingMode: LoadingMode;\r\n\r\n    /**\r\n     * The service state. \r\n     */\r\n    public serviceState: ServiceState;\r\n\r\n    /**\r\n     * The path prefix for the asynchronous loading.\r\n     */\r\n    private prefix: string;\r\n\r\n    /**\r\n     * Data format for the asynchronous loading.\r\n     */\r\n    private dataFormat: string;\r\n\r\n    /**\r\n     * True if the asynchronous loading uses a Web API to get the data.\r\n     */\r\n    private webAPI: boolean;\r\n\r\n    /**\r\n     * The translation data: {languageCode: {key: value}}.\r\n     */\r\n    private translationData: any = {};\r\n\r\n    constructor(public http: Http, public locale: LocaleService) {\r\n\r\n        this.prefix = \"\";\r\n        this.loadingMode = LoadingMode.Unknown;\r\n        this.languageCode = \"\";\r\n\r\n        // Initializes the loading mode.\r\n        this.loadingMode = LoadingMode.Direct;\r\n\r\n        // Initializes the service state.\r\n        this.serviceState = ServiceState.isWaiting;\r\n\r\n        // When the language changes, subscribes to the event & call updateTranslation method.\r\n        this.locale.languageCodeChanged.subscribe(\r\n\r\n            // Generator or next.\r\n            (language: string) => this.updateTranslation(language)\r\n\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * Direct loading: adds new translation data.\r\n     * \r\n     * @param language The two-letter code of the language for the translation data\r\n     * @param translation The new translation data\r\n     */\r\n    public addTranslation(language: string, translation: any): void {\r\n\r\n        // Adds the new translation data.\r\n        this.translationData[language] = translation;\r\n\r\n    }\r\n\r\n    /**\r\n     * Asynchronous loading: defines the translation provider.\r\n     * \r\n     * @param prefix The path prefix of the json files\r\n     * @param dataFormat Data format: default value is 'json'.\r\n     * @param webAPI True if the asynchronous loading uses a Web API to get the data.\r\n     */\r\n    public translationProvider(prefix: string, dataFormat: string = \"json\", webAPI: boolean = false): void {\r\n\r\n        this.prefix = prefix;\r\n        this.dataFormat = dataFormat;\r\n        this.webAPI = webAPI;\r\n\r\n        // Updates the loading mode.\r\n        this.loadingMode = LoadingMode.Async;\r\n\r\n    }\r\n\r\n    /**\r\n     * Translates a key.\r\n     * \r\n     * @param key The key to be translated\r\n     * @return The value of translation\r\n     */\r\n    public translate(key: string): string {\r\n\r\n        var value: string;\r\n\r\n        if (this.translationData[this.languageCode] != null) {\r\n\r\n            // Gets the translation by language code. \r\n            var translation: any = this.translationData[this.languageCode];\r\n            // Gets the value of translation by key.   \r\n            value = translation[key];\r\n\r\n        }\r\n\r\n        // If the value of translation is not present, the same key is returned (see issue #1).\r\n        if (value == null || value == \"\") {\r\n\r\n            value = key;\r\n\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n    /**\r\n     * Translates a key.\r\n     * \r\n     * @param key The key to be translated\r\n     * @return An observable of the value of translation\r\n     */\r\n    public translateAsync(key: string): Observable<string> {\r\n\r\n        return new Observable<string>((observer: Observer<string>) => {\r\n\r\n            // Gets the value of translation for the key.\r\n            var value: string = this.translate(key);\r\n\r\n            observer.next(value);\r\n            observer.complete();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates the language code and loads the translation data for the asynchronous loading.\r\n     * \r\n     * @param language The two-letter or three-letter code of the language\r\n     */\r\n    public updateTranslation(language: string = this.locale.getCurrentLanguage()): void {\r\n\r\n        if (language != \"\" && language != this.languageCode) {\r\n\r\n            // Asynchronous loading.\r\n            if (this.loadingMode == LoadingMode.Async) {\r\n\r\n                // Updates the translation data.  \r\n                this.getTranslation(language);\r\n\r\n            } else {\r\n\r\n                // Updates the language code of the service.\r\n                this.languageCode = language;\r\n\r\n                // Updates the service state.\r\n                this.serviceState = ServiceState.isReady;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /* Intl.Collator */\r\n\r\n    /**\r\n     * Compares two keys by the value of translation & the current language code.\r\n     * \r\n     * @param key1, key2 The keys of the values to compare\r\n     * @param extension\r\n     * @param options\r\n     * @return A negative value if the value of translation of key1 comes before the value of translation of key2; a positive value if key1 comes after key2; 0 if they are considered equal or Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    public compare(key1: string, key2: string, extension?: string, options?: any): number {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.Collator(this.languageCode) == false) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n        // Gets the value of translation for the keys.\r\n        var value1: string = this.translate(key1);\r\n        var value2: string = this.translate(key2);\r\n\r\n        var locale: string = this.addExtension(this.languageCode, extension);\r\n\r\n        return new Intl.Collator(locale).compare(value1, value2);\r\n\r\n    }\r\n\r\n    /**\r\n     * Sorts an array of objects or an array of arrays by the current language code.\r\n     * \r\n     * @param list The array to be sorted\r\n     * @param keyName The column that contains the keys of the values to be ordered\r\n     * @param order 'asc' or 'desc'. The default value is 'asc'.\r\n     * @param extension\r\n     * @param options\r\n     * @return The same sorted list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    public sort(list: Array<any>, keyName: any, order?: string, extension?: string, options?: any): Array<any> {\r\n\r\n        if (list == null || keyName == null || IntlSupport.Collator(this.languageCode) == false) { return list; }\r\n\r\n        // Gets the value of translation for the keys.\r\n        for (let item of list) {\r\n\r\n            // Gets the value of translation for the key.\r\n            var value: string = this.translate(item[keyName]);\r\n            // Adds a new column for translated values.\r\n            var translated: string = keyName.concat(\"Translated\");\r\n            // Updates the value in the list.\r\n            item[translated] = value;\r\n\r\n        }\r\n\r\n        var locale: string = this.addExtension(this.languageCode, extension);\r\n\r\n        // Intl.Collator.\r\n        var collator: Intl.Collator = new Intl.Collator(locale, options); // It can be passed directly to Array.prototype.sort.\r\n\r\n        list.sort((a: any, b: any) => {\r\n\r\n            return collator.compare(a[translated], b[translated]);\r\n\r\n        });\r\n\r\n        // Removes the column of translated values.\r\n        var index: number = list.indexOf(translated, 0);\r\n        if (index > -1) {\r\n            list.splice(index, 1);\r\n        }\r\n\r\n        // Descending order.\r\n        if (order != null && order == \"desc\") {\r\n\r\n            list.reverse();\r\n\r\n        }\r\n\r\n        return list;\r\n\r\n    }\r\n\r\n    /**\r\n     * Sorts an array of objects or an array of arrays by the current language code.\r\n     * \r\n     * @param list The array to be sorted\r\n     * @param keyName The column that contains the keys of the values to be ordered\r\n     * @param order 'asc' or 'desc'. The default value is 'asc'.\r\n     * @param extension\r\n     * @param options\r\n     * @return An observable of the sorted list or of the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    public sortAsync(list: Array<any>, keyName: any, order?: string, extension?: string, options?: any): Observable<Array<any>> {\r\n\r\n        return new Observable<any>((observer: Observer<Array<any>>) => {\r\n\r\n            // Gets the sorted list.\r\n            observer.next(this.sort(list, keyName, order, extension, options));\r\n            observer.complete();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Matches a string into an array of objects or an array of arrays.\r\n     * \r\n     * @param s The string to search\r\n     * @param list The array to look for\r\n     * @param keyNames An array that contains the columns to look for\r\n     * @param options\r\n     * @return A filtered list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    public search(s: string, list: Array<any>, keyNames: any[], options: any = { usage: 'search' }): Array<any> {\r\n\r\n        if (list == null || keyNames == null || s == \"\" || IntlSupport.Collator(this.languageCode) == false) { return list; }\r\n\r\n        // Gets the value of translation for the each column.\r\n        var translated: Array<string> = new Array<string>();\r\n\r\n        var i: number = 0;\r\n        for (var i: number = 0; i < keyNames.length; i++) {\r\n\r\n            // Adds a new column for translated values.\r\n            translated.push(keyNames[i].concat(\"Translated\"));\r\n\r\n            for (let item of list) {\r\n\r\n                // Gets the values of translation for the column.\r\n                var value: string = this.translate(item[keyNames[i]]);\r\n                // Updates the value in the list.\r\n                item[translated[i]] = value;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var locale: string = this.languageCode;\r\n\r\n        // Intl.Collator.\r\n        var collator: Intl.Collator = new Intl.Collator(locale, options);\r\n\r\n        var matches: Array<any> = list.filter((v: any) => {\r\n\r\n            var found: boolean = false;\r\n            for (var i: number = 0; i < translated.length; i++) {\r\n\r\n                // Calls matching algorithm.\r\n                if (this.match(v[translated[i]], s, collator)) {\r\n\r\n                    found = true;\r\n                    break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            return found;\r\n\r\n        });\r\n\r\n        // Removes the columns of translated values.\r\n        for (var i: number = 0; i < translated.length; i++) {\r\n\r\n            var index: number = matches.indexOf(translated[i], 0);\r\n            if (index > -1) {\r\n                matches.splice(index, 1);\r\n            }\r\n\r\n        }\r\n\r\n        return matches;\r\n\r\n    }\r\n\r\n    /**\r\n     * Matches a string into an array of objects or an array of arrays.\r\n     * \r\n     * @param s The string to search\r\n     * @param list The array to look for\r\n     * @param keyNames An array that contains the columns to look for\r\n     * @param options\r\n     * @return An observable for each element of the filtered list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    public searchAsync(s: string, list: Array<any>, keyNames: any[], options: any = { usage: 'search' }): Observable<any> {\r\n\r\n        if (list == null) { return null; }\r\n\r\n        if (keyNames == null || s == \"\" || IntlSupport.Collator(this.languageCode) == false) {\r\n\r\n            return new Observable<any>((observer: Observer<any>) => {\r\n\r\n                for (let item of list) {\r\n\r\n                    observer.next(item);\r\n\r\n                }\r\n\r\n                observer.complete();\r\n\r\n            });\r\n\r\n        }\r\n\r\n        return new Observable<any>((observer: Observer<any>) => {\r\n\r\n            // Gets the value of translation for the each column.\r\n            var translated: Array<string> = new Array<string>();\r\n\r\n            var i: number = 0;\r\n            for (var i: number = 0; i < keyNames.length; i++) {\r\n\r\n                // Adds a new column for translated values.\r\n                translated.push(keyNames[i].concat(\"Translated\"));\r\n\r\n                for (let item of list) {\r\n\r\n                    // Gets the values of translation for the column.\r\n                    var value: string = this.translate(item[keyNames[i]]);\r\n                    // Updates the value in the list.\r\n                    item[translated[i]] = value;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            var locale: string = this.languageCode;\r\n\r\n            // Intl.Collator.\r\n            var collator: Intl.Collator = new Intl.Collator(locale, options);\r\n\r\n            for (let v of list) {\r\n\r\n                for (var i: number = 0; i < translated.length; i++) {\r\n\r\n                    // Calls matching algorithm.\r\n                    if (this.match(v[translated[i]], s, collator)) {\r\n\r\n                        observer.next(v);\r\n                        break;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // Removes the columns of translated values.\r\n            for (var i: number = 0; i < translated.length; i++) {\r\n\r\n                var index: number = list.indexOf(translated[i], 0);\r\n                if (index > -1) {\r\n                    list.splice(index, 1);\r\n                }\r\n\r\n            }\r\n\r\n            observer.complete();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    private addExtension(locale: string, extension?: string): string {\r\n\r\n        // Adds extension.\r\n        if (extension != null && extension != \"\") {\r\n\r\n            locale = locale + \"-\" + extension;\r\n\r\n        }\r\n\r\n        return locale;\r\n\r\n    }\r\n\r\n    /**\r\n     * Matching algorithm.\r\n     * \r\n     * @param v The value\r\n     * @param s The string to search\r\n     * return True if match, otherwise false\r\n     */\r\n    private match(v: string, s: string, collator: Intl.Collator): boolean {\r\n\r\n        var vLength: number = v.length;\r\n        var sLength: number = s.length;\r\n\r\n        if (sLength > vLength) { return false; } // The search string is longer than value.\r\n\r\n        if (sLength == vLength) {\r\n\r\n            return collator.compare(v, s) === 0;\r\n\r\n        }\r\n\r\n        // Tries to search the substring.\r\n        var found: boolean = false;\r\n        for (var i: number = 0; i < vLength - (sLength - 1); i++) {\r\n\r\n            var str: string = v.substr(i, sLength);\r\n            if (collator.compare(str, s) === 0) {\r\n\r\n                found = true;\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return found;\r\n\r\n    }\r\n\r\n    /**\r\n     * Asynchronous loading: gets translation data.\r\n     * \r\n     * @param language The two-letter or three-letter code of the language\r\n     */\r\n    private getTranslation(language: string): void {\r\n\r\n        // Initializes the translation data & the service state.\r\n        this.translationData = {};\r\n        this.serviceState = ServiceState.isLoading;\r\n\r\n        // Builds the URL.\r\n        var url: string = this.prefix;\r\n\r\n        if (this.webAPI == true) {\r\n\r\n            // Absolute URL for Web API.\r\n            url += language;\r\n\r\n        } else {\r\n\r\n            // Relative server path for 'json' files.\r\n            url += language + \".\" + this.dataFormat;\r\n\r\n        }\r\n\r\n        // Angular 2 Http module.\r\n        this.http.get(url)\r\n            .map((res: Response) => res.json())\r\n            .subscribe(\r\n\r\n            // Observer or next.\r\n            (res: any) => {\r\n\r\n                // Assigns the observer to the translation data.\r\n                this.translationData[language] = res;\r\n\r\n            },\r\n\r\n            // Error.\r\n            (error: any) => {\r\n\r\n                console.error(\"Localization service:\", error);\r\n\r\n            },\r\n\r\n            // Complete.\r\n            () => {\r\n\r\n                // Updates the service state.\r\n                this.serviceState = ServiceState.isReady;\r\n\r\n                // Updates the language code of the service.\r\n                this.languageCode = language;\r\n\r\n            });\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Defines the service state.\r\n */\r\nexport enum ServiceState {\r\n\r\n    /**\r\n     * The translation data has been loaded.\r\n     */\r\n    isReady,\r\n    /**\r\n     * The service is loading the data.\r\n     */\r\n    isLoading,\r\n    /**\r\n     * The service is waiting for the data.\r\n     */\r\n    isWaiting\r\n\r\n}\r\n\r\n/**\r\n * Defines the loading mode.\r\n */\r\nexport enum LoadingMode {\r\n\r\n    /**\r\n     * Initial state.\r\n     */\r\n    Unknown,\r\n    /**\r\n     * Direct loading.\r\n     */\r\n    Direct,\r\n    /**\r\n     * Asynchronous loading.\r\n     */\r\n    Async\r\n\r\n}\r\n"],"sourceRoot":"/source/"}