{"version":3,"sources":["src/pipes/translate.pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;OAEI,EAAE,IAAI,EAAiB,MAAM,eAAe;OAC5C,EAAE,iBAAiB,EAAE,MAAM,iCAAiC;OAG5D,EAAE,mBAAmB,EAAE,YAAY,EAAE,MAAM,kCAAkC;OAC7E,EAAE,aAAa,EAAE,MAAM,4BAA4B;OACnD,EAAE,YAAY,EAAE,MAAM,2BAA2B;OACjD,EAAE,WAAW,EAAE,MAAM,0BAA0B;AAEtD;;GAEG;AAuDH;;IAEI,YAAmB,YAAiC,EAAS,MAAqB;QAA/D,iBAAY,GAAZ,YAAY,CAAqB;QAAS,WAAM,GAAN,MAAM,CAAe;IAAI,CAAC;IAEvF;;;;;;OAMG;IACI,SAAS,CAAC,GAAW,EAAE,IAAY;QAEtC,4BAA4B;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;YAEzD,IAAI,MAAM,GAAW,QAAQ,CAAC;YAC9B,IAAI,MAAM,GAAW,GAAG,CAAC;YAEzB,eAAe;YACf,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBAE3B,+BAA+B;gBAC/B,IAAI,MAAM,GAAW,UAAU,CAAC,GAAG,CAAC,CAAC;gBAErC,gCAAgC;gBAChC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBACjC,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;gBAEvB,wCAAwC;gBACxC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;oBAErF,wBAAwB;oBACxB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,eAAa,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;gBAE9I,CAAC;YAEL,CAAC;YAED,oDAAoD;YACpD,IAAI,KAAK,GAAW,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAExD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEtC,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IAEf,CAAC;AAEL,CAAC;AAxGD;IAAC,IAAI,CAAC;QACF,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,IAAI;KACb,CAAC;;iBAAA;AAqGD","file":"src/pipes/translate.pipe.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { NumberFormatStyle } from '@angular/common/src/facade/intl';\r\n\r\n// Services.\r\nimport { LocalizationService, ServiceState } from '../services/localization.service';\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleNumber } from '../services/locale-number';\r\nimport { IntlSupport } from '../services/Intl-support';\r\n\r\n/**\r\n * 'translate' pipe function.\r\n */\r\n@Pipe({\r\n    name: 'translate',\r\n    pure: true\r\n})\r\n\r\n/**\r\n * TranslatePipe class.\r\n * Translates messages.\r\n * \r\n * Getting the message translation:\r\n * \r\n * expression | translate:lang\r\n * \r\n * where 'expression' is a string key that indicates the message to translate and 'lang' is the language code for the LocalizationService.\r\n * \r\n * For example, to get the translation, add in the template:\r\n * \r\n * {{ 'TITLE' | translate:lang }}\r\n * \r\n * and include in the component:\r\n * \r\n * import {LocalizationService} from 'angular2localization/angular2localization';\r\n * import {TranslatePipe} from 'angular2localization/angular2localization';\r\n * \r\n * @Component({\r\n *     ...\r\n *     pipes: [TranslatePipe]\r\n * })\r\n * \r\n * export class AppComponent {\r\n * \r\n *     constructor(public localization: LocalizationService) {\r\n *         ...\r\n *     }\r\n * \r\n *     // Gets the language code for the LocalizationService.\r\n *     get lang(): string {\r\n *\r\n *         return this.localization.languageCode;\r\n *      \r\n *     }\r\n * \r\n * }\r\n * \r\n * With Angular 2 I18nSelectPipe that displays the string that matches the current value:\r\n *\r\n * {{ expression | i18nSelect:mapping | translate:lang }}\r\n * \r\n * With Angular 2 I18nPluralPipe that pluralizes the value properly:\r\n *\r\n * {{ expression | i18nPlural:mapping | translate:lang }}\r\n * \r\n * @author Roberto Simonetti\r\n */\r\nexport class TranslatePipe implements PipeTransform {\r\n\r\n    constructor(public localization: LocalizationService, public locale: LocaleService) { }\r\n\r\n    /**\r\n     * TranslatePipe transform method.\r\n     * \r\n     * @param key The key to be translated\r\n     * @param lang The current language code for the LocalizationService\r\n     * @return The value of translation\r\n     */\r\n    public transform(key: string, lang: string): string {\r\n\r\n        // Checks the service state.\r\n        if (this.localization.serviceState == ServiceState.isReady) {\r\n\r\n            var REGEXP: RegExp = /^\\d+\\b/;\r\n            var keyStr: string = key;\r\n\r\n            // i18n plural.\r\n            if (REGEXP.exec(key) != null) {\r\n\r\n                // Tries to extract the number.\r\n                var keyNum: number = parseFloat(key);\r\n\r\n                // Tries to extract the string. \r\n                keyStr = key.replace(REGEXP, \"\");\r\n                keyStr = keyStr.trim();\r\n\r\n                // Checks the number & support for Intl.\r\n                if (!isNaN(keyNum) && IntlSupport.NumberFormat(this.locale.getDefaultLocale()) == true) {\r\n\r\n                    // Localizes the number.\r\n                    key = key.replace(/^\\d+/, LocaleNumber.format(TranslatePipe, this.locale.getDefaultLocale(), keyNum, NumberFormatStyle.Decimal, '1.0-3'));\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // Gets the value of translation for the key string.\r\n            var value: string = this.localization.translate(keyStr);\r\n\r\n            return key.replace(keyStr, value);\r\n\r\n        }\r\n\r\n        return key;\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}