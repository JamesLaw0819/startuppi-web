/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Pipe } from '@angular/core';
import { NumberFormatStyle } from '@angular/common/src/facade/intl';
import { LocaleNumber } from '../services/locale-number';
import { IntlSupport } from '../services/Intl-support';
/**
 * 'localedecimal' pipe function.
 */
let LocaleDecimalPipe_1;
export let LocaleDecimalPipe = LocaleDecimalPipe_1 = class LocaleDecimalPipe {
    /**
     * LocaleDecimalPipe transform method.
     *
     * @param value The number to be localized
     * @param defaultLocale The default locale
     * @param digits The format of the number
     * @return The locale decimal
     */
    transform(value, defaultLocale, digits = null) {
        // Checks for support for Intl.
        if (IntlSupport.NumberFormat(defaultLocale) == true) {
            return LocaleNumber.format(LocaleDecimalPipe_1, defaultLocale, value, NumberFormatStyle.Decimal, digits);
        }
        // Returns the number without localization.
        return value;
    }
};
LocaleDecimalPipe = LocaleDecimalPipe_1 = __decorate([
    Pipe({
        name: 'localedecimal',
        pure: true
    }), 
    __metadata('design:paramtypes', [])
], LocaleDecimalPipe);
/**
 * 'localepercent' pipe function.
 */
let LocalePercentPipe_1;
export let LocalePercentPipe = LocalePercentPipe_1 = class LocalePercentPipe {
    /**
     * LocalePercentPipe transform method.
     *
     * @param value The number to be localized
     * @param defaultLocale The default locale
     * @param digits The format of the number
     * @return The locale percent
     */
    transform(value, defaultLocale, digits = null) {
        // Checks for support for Intl.
        if (IntlSupport.NumberFormat(defaultLocale) == true) {
            return LocaleNumber.format(LocalePercentPipe_1, defaultLocale, value, NumberFormatStyle.Percent, digits);
        }
        // Returns the number without localization.
        return value;
    }
};
LocalePercentPipe = LocalePercentPipe_1 = __decorate([
    Pipe({
        name: 'localepercent',
        pure: true
    }), 
    __metadata('design:paramtypes', [])
], LocalePercentPipe);
/**
 * 'localecurrency' pipe function.
 */
let LocaleCurrencyPipe_1;
export let LocaleCurrencyPipe = LocaleCurrencyPipe_1 = class LocaleCurrencyPipe {
    /**
     * LocaleCurrencyPipe transform method.
     *
     * @param value The number to be localized
     * @param defaultLocale The default locale
     * @param currency The current currency
     * @param symbolDisplay Indicates whether to use the currency symbol
     * @param digits The format of the number
     * @return The locale currency
     */
    transform(value, defaultLocale, currency, symbolDisplay = false, digits = null) {
        // Checks for support for Intl.
        if (IntlSupport.NumberFormat(defaultLocale) == true) {
            return LocaleNumber.format(LocaleCurrencyPipe_1, defaultLocale, value, NumberFormatStyle.Currency, digits, currency, symbolDisplay);
        }
        // Returns the number without localization & currency.
        return value + " " + currency;
    }
};
LocaleCurrencyPipe = LocaleCurrencyPipe_1 = __decorate([
    Pipe({
        name: 'localecurrency',
        pure: true
    }), 
    __metadata('design:paramtypes', [])
], LocaleCurrencyPipe);

//# sourceMappingURL=locale-number.pipe.js.map
