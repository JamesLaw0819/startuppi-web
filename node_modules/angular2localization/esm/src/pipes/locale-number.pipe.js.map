{"version":3,"sources":["src/pipes/locale-number.pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;OAEI,EAAE,IAAI,EAAiB,MAAM,eAAe;OAC5C,EAAE,iBAAiB,EAAE,MAAM,iCAAiC;OAG5D,EAAE,YAAY,EAAE,MAAM,2BAA2B;OACjD,EAAE,WAAW,EAAE,MAAM,0BAA0B;AAEtD;;GAEG;AAkDH;;IAEI;;;;;;;OAOG;IACI,SAAS,CAAC,KAAU,EAAE,aAAqB,EAAE,MAAM,GAAW,IAAI;QAErE,+BAA+B;QAC/B,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAElD,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAiB,EAAE,aAAa,EAAE,KAAK,EAAE,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE3G,CAAC;QAED,2CAA2C;QAC3C,MAAM,CAAC,KAAK,CAAC;IAEjB,CAAC;AAEL,CAAC;AAzED;IAAC,IAAI,CAAC;QACF,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,IAAI;KACb,CAAC;;qBAAA;AAwEF;;GAEG;AA8CH;;IAEI;;;;;;;OAOG;IACI,SAAS,CAAC,KAAU,EAAE,aAAqB,EAAE,MAAM,GAAW,IAAI;QAErE,+BAA+B;QAC/B,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAElD,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAiB,EAAE,aAAa,EAAE,KAAK,EAAE,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE3G,CAAC;QAED,2CAA2C;QAC3C,MAAM,CAAC,KAAK,CAAC;IAEjB,CAAC;AAEL,CAAC;AArED;IAAC,IAAI,CAAC;QACF,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,IAAI;KACb,CAAC;;qBAAA;AAoEF;;GAEG;AAuDH;;IAEI;;;;;;;;;OASG;IACI,SAAS,CAAC,KAAU,EACvB,aAAqB,EACrB,QAAgB,EAChB,aAAa,GAAY,KAAK,EAC9B,MAAM,GAAW,IAAI;QAErB,+BAA+B;QAC/B,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAElD,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,oBAAkB,EAAE,aAAa,EAAE,KAAK,EAAE,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAEtI,CAAC;QAED,sDAAsD;QACtD,MAAM,CAAC,KAAK,GAAG,GAAG,GAAG,QAAQ,CAAC;IAElC,CAAC;AAEL,CAAC;AApFD;IAAC,IAAI,CAAC;QACF,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,IAAI;KACb,CAAC;;sBAAA;AAiFD","file":"src/pipes/locale-number.pipe.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { NumberFormatStyle } from '@angular/common/src/facade/intl';\r\n\r\n// Services.\r\nimport { LocaleNumber } from '../services/locale-number';\r\nimport { IntlSupport } from '../services/Intl-support';\r\n\r\n/**\r\n * 'localedecimal' pipe function.\r\n */\r\n@Pipe({\r\n    name: 'localedecimal',\r\n    pure: true\r\n})\r\n\r\n/**\r\n * LocaleDecimalPipe class.\r\n * Localizes decimal numbers.\r\n * \r\n * Getting the local decimal:\r\n * \r\n * expression | localedecimal[:defaultLocale:[digitInfo]]\r\n * \r\n * where 'expression' is a number and 'digitInfo' has the following format:\r\n * \r\n * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\r\n * \r\n * For example, to get the local decimal, add in the template:\r\n * \r\n * {{ pi | localedecimal:defaultLocale:'1.5-5' }}\r\n * \r\n * and include in the component:\r\n * \r\n * import {LocaleService} from 'angular2localization/angular2localization';\r\n * import {LocaleDecimalPipe} from 'angular2localization/angular2localization';\r\n * \r\n * @Component({\r\n *     ...\r\n *     pipes: [LocaleDecimalPipe]\r\n * })\r\n * \r\n * export class AppComponent {\r\n * \r\n *     constructor(public locale: LocaleService) {\r\n *         ...\r\n *     }\r\n * \r\n *     // Gets the default locale.\r\n *     get defaultLocale(): string {\r\n *\r\n *         return this.locale.getDefaultLocale();\r\n *      \r\n *     }\r\n * \r\n * }\r\n * \r\n * @author Roberto Simonetti\r\n * @see Angular 2 DecimalPipe for further information\r\n */\r\nexport class LocaleDecimalPipe implements PipeTransform {\r\n\r\n    /**\r\n     * LocaleDecimalPipe transform method.\r\n     * \r\n     * @param value The number to be localized\r\n     * @param defaultLocale The default locale\r\n     * @param digits The format of the number\r\n     * @return The locale decimal\r\n     */\r\n    public transform(value: any, defaultLocale: string, digits: string = null): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            return LocaleNumber.format(LocaleDecimalPipe, defaultLocale, value, NumberFormatStyle.Decimal, digits);\r\n\r\n        }\r\n\r\n        // Returns the number without localization.\r\n        return value;\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 'localepercent' pipe function.\r\n */\r\n@Pipe({\r\n    name: 'localepercent',\r\n    pure: true\r\n})\r\n\r\n/**\r\n * LocalePercentPipe class.\r\n * Localizes percent numbers.\r\n * \r\n * Getting the local percentage:\r\n * \r\n * expression | localepercent[:defaultLocale:[digitInfo]]\r\n * \r\n * For example, to get the local percentage, add in the template:\r\n * \r\n * {{ a | localepercent:defaultLocale:'1.1-1' }}\r\n * \r\n * and include in the component:\r\n * \r\n * import {LocaleService} from 'angular2localization/angular2localization';\r\n * import {LocalePercentPipe} from 'angular2localization/angular2localization';\r\n * \r\n * @Component({\r\n *     ...\r\n *     pipes: [LocalePercentPipe]\r\n * })\r\n * \r\n * export class AppComponent {\r\n * \r\n *     constructor(public locale: LocaleService) {\r\n *         ...\r\n *     }\r\n * \r\n *     // Gets the default locale.\r\n *     get defaultLocale(): string {\r\n *\r\n *         return this.locale.getDefaultLocale();\r\n *      \r\n *     }\r\n * \r\n * }\r\n * \r\n * @author Roberto Simonetti\r\n * @see Angular 2 PercentPipe for further information\r\n */\r\nexport class LocalePercentPipe implements PipeTransform {\r\n\r\n    /**\r\n     * LocalePercentPipe transform method.\r\n     * \r\n     * @param value The number to be localized\r\n     * @param defaultLocale The default locale\r\n     * @param digits The format of the number\r\n     * @return The locale percent\r\n     */\r\n    public transform(value: any, defaultLocale: string, digits: string = null): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            return LocaleNumber.format(LocalePercentPipe, defaultLocale, value, NumberFormatStyle.Percent, digits);\r\n\r\n        }\r\n\r\n        // Returns the number without localization.\r\n        return value;\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 'localecurrency' pipe function.\r\n */\r\n@Pipe({\r\n    name: 'localecurrency',\r\n    pure: true\r\n})\r\n\r\n/**\r\n * LocaleCurrencyPipe class.\r\n * Localizes currencies.\r\n * \r\n * Getting the local currency:\r\n * \r\n * expression | localecurrency[:defaultLocale[:currency[:symbolDisplay[:digitInfo]]]]\r\n * \r\n * where 'symbolDisplay' is a boolean indicating whether to use the currency symbol (e.g. $) or the currency code (e.g. USD) in the output. \r\n * \r\n * For example, to get the local currency, add in the template:\r\n * \r\n * {{ b | localecurrency:defaultLocale:currency:true:'1.2-2' }}\r\n * \r\n * and include in the component:\r\n * \r\n * import {LocaleService} from 'angular2localization/angular2localization';\r\n * import {LocaleCurrencyPipe} from 'angular2localization/angular2localization';\r\n * \r\n * @Component({\r\n *     ...\r\n *     pipes: [LocaleCurrencyPipe]\r\n * })\r\n * \r\n * export class AppComponent {\r\n * \r\n *     constructor(public locale: LocaleService) {\r\n *         ...\r\n *     }\r\n * \r\n *     // Gets the default locale.\r\n *     get defaultLocale(): string {\r\n *\r\n *         return this.locale.getDefaultLocale();\r\n *      \r\n *     }\r\n * \r\n *     // Gets the current currency.\r\n *     get currency(): string {\r\n *\r\n *         return this.locale.getCurrentCurrency();\r\n *      \r\n *     }\r\n * \r\n * }\r\n * \r\n * @author Roberto Simonetti\r\n * @see Angular 2 CurrencyPipe for further information\r\n */\r\nexport class LocaleCurrencyPipe implements PipeTransform {\r\n\r\n    /**\r\n     * LocaleCurrencyPipe transform method.\r\n     * \r\n     * @param value The number to be localized\r\n     * @param defaultLocale The default locale\r\n     * @param currency The current currency\r\n     * @param symbolDisplay Indicates whether to use the currency symbol\r\n     * @param digits The format of the number\r\n     * @return The locale currency\r\n     */\r\n    public transform(value: any,\r\n        defaultLocale: string,\r\n        currency: string,\r\n        symbolDisplay: boolean = false,\r\n        digits: string = null): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            return LocaleNumber.format(LocaleCurrencyPipe, defaultLocale, value, NumberFormatStyle.Currency, digits, currency, symbolDisplay);\r\n\r\n        }\r\n\r\n        // Returns the number without localization & currency.\r\n        return value + \" \" + currency;\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}