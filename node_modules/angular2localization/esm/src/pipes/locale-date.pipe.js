/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Pipe } from '@angular/core';
import { DateWrapper, NumberWrapper, isBlank, isDate, isString } from '@angular/common/src/facade/lang';
import { DateFormatter } from '@angular/common/src/facade/intl';
import { StringMapWrapper } from '@angular/common/src/facade/collection';
import { InvalidPipeArgumentException } from '@angular/common/src/pipes/invalid_pipe_argument_exception';
import { IntlSupport } from '../services/Intl-support';
/**
 * 'localedate' pipe function.
 */
let LocaleDatePipe_1;
export let LocaleDatePipe = LocaleDatePipe_1 = class LocaleDatePipe {
    /**
     * LocaleDatePipe transform method.
     *
     * @param value The date to be localized
     * @param defaultLocale The default locale
     * @param pattern The format of the date
     * @return The locale date
     */
    transform(value, defaultLocale, pattern = 'mediumDate') {
        if (isBlank(value)) {
            return null;
        }
        if (!this.supports(value)) {
            throw new InvalidPipeArgumentException(LocaleDatePipe_1, value);
        }
        if (NumberWrapper.isNumeric(value)) {
            value = DateWrapper.fromMillis(NumberWrapper.parseInt(value, 10));
        }
        else if (isString(value)) {
            value = DateWrapper.fromISOString(value);
        }
        // Checks for support for Intl.
        if (IntlSupport.DateTimeFormat(defaultLocale) == true) {
            if (StringMapWrapper.contains(LocaleDatePipe_1.ALIASES, pattern)) {
                pattern = StringMapWrapper.get(LocaleDatePipe_1.ALIASES, pattern);
            }
            return DateFormatter.format(value, defaultLocale, pattern);
        }
        // Returns the date without localization.
        return value;
    }
    supports(obj) {
        if (isDate(obj) || NumberWrapper.isNumeric(obj)) {
            return true;
        }
        if (isString(obj) && isDate(DateWrapper.fromISOString(obj))) {
            return true;
        }
        return false;
    }
};
LocaleDatePipe.ALIASES = {
    'medium': 'yMMMdjms',
    'short': 'yMdjm',
    'fullDate': 'yMMMMEEEEd',
    'longDate': 'yMMMMd',
    'mediumDate': 'yMMMd',
    'shortDate': 'yMd',
    'mediumTime': 'jms',
    'shortTime': 'jm'
};
LocaleDatePipe = LocaleDatePipe_1 = __decorate([
    Pipe({
        name: 'localedate',
        pure: true
    }), 
    __metadata('design:paramtypes', [])
], LocaleDatePipe);

//# sourceMappingURL=locale-date.pipe.js.map
