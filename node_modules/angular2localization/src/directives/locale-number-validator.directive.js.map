{"version":3,"sources":["src/directives/locale-number-validator.directive.ts"],"names":[],"mappings":"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","file":"src/directives/locale-number-validator.directive.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Directive, provide, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, FormControl, Validator } from '@angular/forms';\r\n\r\n// Services.\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleParser } from '../services/locale-parser';\r\n\r\n/**\r\n * Function that takes a Control and returns either null when it’s valid, or and error object if it’s not.\r\n * \r\n * @param locale The reference to LocaleService\r\n * @param digits The format of the number\r\n * @param MIN_VALUE The minimum value for the number\r\n * @param MAX_VALUE The maximum value for the number\r\n * @return An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid\r\n */\r\nexport function validateLocaleNumber(locale: LocaleService, digits: string, MIN_VALUE: number = Number.MIN_VALUE, MAX_VALUE: number = Number.MAX_VALUE): Function {\r\n\r\n    var defaultLocale: string;\r\n    var NUMBER_REGEXP: RegExp;\r\n\r\n    return (c: FormControl): { [key: string]: any } => {\r\n\r\n        // Checks if the default locale has changed. \r\n        if (defaultLocale != locale.getDefaultLocale()) {\r\n\r\n            NUMBER_REGEXP = LocaleParser.NumberRegExpFactory(locale.getDefaultLocale(), digits);\r\n            defaultLocale = locale.getDefaultLocale();\r\n\r\n        }\r\n\r\n        // Checks the format.\r\n        if (NUMBER_REGEXP.test(c.value)) {\r\n\r\n            var parsedValue: number;\r\n\r\n            parsedValue = LocaleParser.Number(c.value, locale.getDefaultLocale());\r\n\r\n            if (parsedValue < MIN_VALUE) {\r\n\r\n                return { minValue: false };\r\n\r\n            } else if (parsedValue > MAX_VALUE) {\r\n\r\n                return { maxValue: false };\r\n\r\n            }\r\n\r\n            return null; // The number is valid.\r\n\r\n        } else {\r\n\r\n            return { format: false };\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]', // Validator works with ngModel and formControl directives.\r\n    providers: [\r\n        provide(NG_VALIDATORS, {\r\n            useExisting: forwardRef(() => LocaleNumberValidator),\r\n            multi: true\r\n        })\r\n    ]\r\n})\r\n\r\n/**\r\n * LocaleNumberValidator class.\r\n * Validates a number by default locale.\r\n * \r\n * @author Roberto Simonetti\r\n */\r\nexport class LocaleNumberValidator implements Validator, OnInit {\r\n\r\n    /**\r\n     * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.\r\n     */\r\n    @Input('validateLocaleNumber') digits: string;\r\n\r\n    @Input() set minValue(value: number) {\r\n\r\n        this.MIN_VALUE = value || this.MIN_VALUE;\r\n\r\n    }\r\n\r\n    @Input() set maxValue(value: number) {\r\n\r\n        this.MAX_VALUE = value || this.MAX_VALUE;\r\n\r\n    }\r\n\r\n    private MIN_VALUE: number = Number.MIN_VALUE;\r\n\r\n    private MAX_VALUE: number = Number.MAX_VALUE;\r\n\r\n    private validator: Function;\r\n\r\n    constructor(public locale: LocaleService) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.validator = validateLocaleNumber(this.locale, this.digits, this.MIN_VALUE, this.MAX_VALUE);\r\n\r\n    }\r\n\r\n    public validate(c: FormControl): Function {\r\n\r\n        return this.validator(c);\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}