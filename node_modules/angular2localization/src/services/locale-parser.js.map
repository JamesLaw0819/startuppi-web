{"version":3,"sources":["src/services/locale-parser.ts"],"names":[],"mappings":"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","file":"src/services/locale-parser.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { isPresent, isBlank, NumberWrapper, RegExpWrapper } from '@angular/common/src/facade/lang';\r\nimport { BaseException } from '@angular/common/src/facade/exceptions';\r\nimport { NumberFormatStyle, NumberFormatter } from '@angular/common/src/facade/intl';\r\n\r\n// Services.\r\nimport { IntlSupport } from './Intl-support';\r\n\r\n/**\r\n * LocaleParser class.\r\n * Parses a string and returns a number by default locale.\r\n * \r\n * @author Roberto Simonetti\r\n */\r\nexport class LocaleParser {\r\n\r\n    /**\r\n     * Builds the regular expression for a number by default locale.\r\n     * \r\n     * @param defaultLocale The default locale\r\n     * @param digits The digit info: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\r\n     * @return A RegExp object\r\n     */\r\n    public static NumberRegExpFactory(defaultLocale: string, digits: string): RegExp {\r\n\r\n        // Gets digits.\r\n        var minInt: number = 1;\r\n        var minFraction: number = 0;\r\n        var maxFraction: number = 3;\r\n        const NUMBER_FORMAT_REGEXP: RegExp = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/g;\r\n\r\n        if (isPresent(digits)) {\r\n\r\n            var parts: RegExpExecArray = RegExpWrapper.firstMatch(NUMBER_FORMAT_REGEXP, digits);\r\n\r\n            if (isBlank(parts)) {\r\n                throw new BaseException(`${digits} is not a valid digit info for number`);\r\n            }\r\n            if (isPresent(parts[1])) {  // Min integer digits.\r\n                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\r\n            }\r\n            if (isPresent(parts[3])) {  // Min fraction digits.\r\n                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\r\n            }\r\n            if (isPresent(parts[5])) {  // Max fraction digits.\r\n                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\r\n            }\r\n\r\n        }\r\n\r\n        // Converts numbers & signs to Unicode by default locale.\r\n        var codes: DecimalCode = new DecimalCode(defaultLocale);\r\n\r\n        var minusSign: string = codes.minusSign;\r\n        var zero: string = codes.numbers[0];\r\n        var decimalSeparator: string = codes.decimalSeparator;\r\n        var nine: string = codes.numbers[9];\r\n\r\n        // Pattern for 1.2-2 digits: /^-?[0-9]{1,}\\.[0-9]{2,2}$/\r\n        // Unicode pattern = \"^\\u002d?[\\u0030-\\u0039]{1,}\\\\u002e[\\u0030-\\u0039]{2,2}$\";\r\n        var pattern: string;\r\n        if (minFraction > 0 && maxFraction > 0) {\r\n\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n\r\n        } else if (minFraction == 0 && maxFraction > 0) {\r\n\r\n            // Decimal separator is optional.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n\r\n        } else {\r\n\r\n            // Integer number.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minInt + \",}$\";\r\n\r\n        }\r\n        pattern = codes.UnicodeToChar(pattern);\r\n        var regExp: RegExp = new RegExp(pattern);\r\n\r\n        return regExp;\r\n\r\n        // Wonderful, it works!\r\n    }\r\n\r\n    /**\r\n     * Parses a string and returns a number by default locale.\r\n     * \r\n     * @param s The string to be parsed\r\n     * @param defaultLocale The default locale\r\n     * @return A number. If the string cannot be converted to a number, returns NaN\r\n     */\r\n    public static Number(s: string, defaultLocale: string): number {\r\n\r\n        if (s == \"\" || defaultLocale == \"\" || defaultLocale == null) { return null; }\r\n\r\n        var codes: DecimalCode = new DecimalCode(defaultLocale);\r\n\r\n        return codes.parse(s);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * NumberCode abstract superclass.\r\n * \r\n * Converts numbers to Unicode by locales.\r\n * \r\n * @author Roberto Simonetti\r\n */\r\nabstract class NumberCode {\r\n\r\n    /**\r\n     * Unicode for numbers from 0 to 9.\r\n     */\r\n    public numbers: Array<string> = [];\r\n\r\n    constructor(public defaultLocale: string) {\r\n\r\n        for (var i: number = 0; i <= 9; i++) {\r\n\r\n            this.numbers.push(this.Unicode(i.toString()));\r\n\r\n        }\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            // Updates Unicode for numbers by default locale.\r\n            for (var i: number = 0; i <= 9; i++) {\r\n\r\n                this.numbers[i] = this.Unicode(NumberFormatter.format(i, defaultLocale, NumberFormatStyle.Decimal, {\r\n                    minimumIntegerDigits: 1,\r\n                    minimumFractionDigits: 0,\r\n                    maximumFractionDigits: 0,\r\n                    currency: null,\r\n                    currencyAsSymbol: false\r\n                }));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Parses a string and returns a number by default locale.\r\n     * \r\n     * @param s The string to be parsed\r\n     * @return A number\r\n     */\r\n    public abstract parse(s: string): number;\r\n\r\n    public abstract UnicodeToChar(pattern: string): string;\r\n\r\n    protected Unicode(c: string): string {\r\n\r\n        return \"\\\\u\" + this.HexEncode(c.charCodeAt(0));\r\n\r\n    }\r\n\r\n    protected HexEncode(value: number): string {\r\n\r\n        var hex: string = value.toString(16).toUpperCase();\r\n        // With padding.\r\n        hex = \"0000\".substr(0, 4 - hex.length) + hex;\r\n\r\n        return hex;\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * DecimalCode class.\r\n * \r\n * Converts numbers & signs to Unicode by locales.\r\n * \r\n * @author Roberto Simonetti\r\n */\r\nclass DecimalCode extends NumberCode {\r\n\r\n    /**\r\n     * Unicode for minus sign.\r\n     */\r\n    public minusSign: string;\r\n\r\n    /**\r\n     * Unicode for decimal separator.\r\n     */\r\n    public decimalSeparator: string;\r\n\r\n    constructor(public defaultLocale: string) {\r\n        super(defaultLocale);\r\n\r\n        this.minusSign = this.Unicode(\"-\");\r\n        this.decimalSeparator = this.Unicode(\".\");\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            // Updates Unicode for signs by default locale.\r\n            var value: number = -0.9; // Reference value.\r\n            var localeValue: string = NumberFormatter.format(value, defaultLocale, NumberFormatStyle.Decimal, {\r\n                minimumIntegerDigits: 1,\r\n                minimumFractionDigits: 1,\r\n                maximumFractionDigits: 1,\r\n                currency: null,\r\n                currencyAsSymbol: false\r\n            });\r\n\r\n            // Checks Unicode character 'RIGHT-TO-LEFT MARK' (U+200F).\r\n            var index: number;\r\n            if (this.Unicode(localeValue.charAt(0)) != \"\\\\u200F\") {\r\n                // Left to right.\r\n                index = 0;\r\n            } else {\r\n                // Right to left.\r\n                index = 1;\r\n            }\r\n\r\n            this.minusSign = this.Unicode(localeValue.charAt(index));\r\n            this.decimalSeparator = this.Unicode(localeValue.charAt(index + 2));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public parse(s: string): number {\r\n\r\n        // Splits the String object into an array of characters.\r\n        var characters: Array<string> = s.split(\"\");\r\n\r\n        // Builds the value.\r\n        var value: string = \"\";\r\n\r\n        for (let char of characters) {\r\n\r\n            var charCode: string = this.Unicode(char);\r\n\r\n            // Tries to look for the char code in numbers and signs.\r\n            var index: number = this.numbers.indexOf(charCode);\r\n            if (index != -1) {\r\n\r\n                value += index;\r\n\r\n            } else if (charCode == this.minusSign) {\r\n\r\n                value += \"-\";\r\n\r\n            } else if (charCode == this.decimalSeparator) {\r\n\r\n                value += \".\";\r\n\r\n            } else { return NaN; }\r\n\r\n        }\r\n\r\n        return parseFloat(value);\r\n\r\n    }\r\n\r\n    public UnicodeToChar(pattern: string): string {\r\n\r\n        return pattern.replace(/\\\\u[\\dA-F]{4}/gi, (match: string) => {\r\n\r\n            return String.fromCharCode(parseInt(match.replace(/\\\\u/g, \"\"), 16));\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}