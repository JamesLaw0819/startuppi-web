/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
/**
 * LocaleService class.
 * Defines language, default locale & currency.
 *
 * Instantiate this class only once in the route component in order to access the data of location from anywhere in the application:
 *
 * FIRST SCENARIO - Dates & numbers.
 *
 * import {LocaleService} from 'angular2localization/angular2localization';
 *
 * @Component({
 *     selector: 'app-component',
 *     ...
 *     providers: [LocaleService] // Inherited by all descendants.
 * })
 *
 * export class AppComponent {
 *
 *     constructor(public locale: LocaleService) {
 *
 *         // Required: default language (ISO 639 two-letter or three-letter code) and country (ISO 3166 two-letter, uppercase code).
 *         this.locale.definePreferredLocale('en', 'US');
 *
 *         // Optional: default currency (ISO 4217 three-letter code).
 *         this.locale.definePreferredCurrency('USD');
 *
 *      }
 *
 * }
 *
 * SECOND SCENARIO - Messages.
 *
 * import {LocaleService, LocalizationService} from 'angular2localization/angular2localization';
 *
 * @Component({
 *     selector: 'app-component',
 *     ...
 *     providers: [LocaleService, LocalizationService] // Inherited by all descendants.
 * })
 *
 * export class AppComponent {
 *
 *     constructor(public locale: LocaleService, public localization: LocalizationService) {
 *
 *         // Adds a new language (ISO 639 two-letter or three-letter code).
 *         this.locale.addLanguage('en');
 *         // Add a new language here.
 *
 *         // Required: default language and expiry (No days). If the expiry is omitted, the cookie becomes a session cookie.
 *         this.locale.definePreferredLanguage('en', 30);
 *
 *     }
 *
 * }
 *
 * THIRD SCENARIO - Messages, dates & numbers.
 *
 * import {LocaleService, LocalizationService} from 'angular2localization/angular2localization';
 *
 * @Component({
 *     selector: 'app-component',
 *     ...
 *     providers: [LocaleService, LocalizationService] // Inherited by all descendants.
 * })
 *
 * export class AppComponent {
 *
 *     constructor(public locale: LocaleService, public localization: LocalizationService) {
 *
 *         // Adds a new language (ISO 639 two-letter or three-letter code).
 *         this.locale.addLanguage('en');
 *         // Add a new language here.
 *
 *         // Required: default language, country (ISO 3166 two-letter, uppercase code) and expiry (No days). If the expiry is omitted, the cookie becomes a session cookie.
 *         this.locale.definePreferredLocale('en', 'US', 30);
 *
 *         // Optional: default currency (ISO 4217 three-letter code).
 *         this.locale.definePreferredCurrency('USD');
 *
 *     }
 *
 * }
 *
 * Changing language.
 *
 * To change language at runtime, call the following method:
 *
 * this.locale.setCurrentLanguage(language);
 *
 * where 'language' is the two-letter or three-letter code of the new language (ISO 639).
 *
 *
 * Changing locale.
 *
 * To change locale at runtime, call the following method:
 *
 * this.locale.setCurrentLocale(language, country);
 *
 * where 'language' is the two-letter or three-letter code of the new language (ISO 639)
 * and 'country' is the two-letter, uppercase code of the new country (ISO 3166).
 *
 *
 * Changing currency.
 *
 * To change currency at runtime, call the following method:
 *
 * this.locale.setCurrentCurrency(currency);
 *
 * where 'currency' is the three-letter code of the new currency (ISO 4217).
 *
 * @author Roberto Simonetti
 */
var LocaleService = (function () {
    function LocaleService() {
        /**
         * Output for event current language code changed.
         */
        this.languageCodeChanged = new core_1.EventEmitter();
        /**
         * Output for event current country code changed.
         */
        this.countryCodeChanged = new core_1.EventEmitter();
        /**
         * Output for event current currency code changed.
         */
        this.currencyCodeChanged = new core_1.EventEmitter();
        /**
         * Output for event script code changed.
         */
        this.scriptCodeChanged = new core_1.EventEmitter();
        /**
         * Output for event numbering system changed.
         */
        this.numberingSystemChanged = new core_1.EventEmitter();
        /**
         * Output for event calendar changed.
         */
        this.calendarChanged = new core_1.EventEmitter();
        /**
         * Enable/disable cookie.
         */
        this.enableCookie = false;
        /**
         * Enable/disable Local Storage.
         */
        this.enableLocalStorage = false;
        /**
         * The available language codes.
         */
        this.languageCodes = [];
        this.languageCode = "";
        this.countryCode = "";
        this.currencyCode = "";
        this.defaultLocale = "";
        this.scriptCode = "";
        this.numberingSystem = "";
        this.calendar = "";
        // Counts the reference to the service.
        LocaleService.referenceCounter++;
        // Enables the cookies for the first instance of the service (see issue #11).
        if (LocaleService.referenceCounter == 1) {
            this.enableCookie = true;
        }
    }
    /**
     * Adds a new language.
     *
     * @param language The two-letter or three-letter code of the new language
     */
    LocaleService.prototype.addLanguage = function (language) {
        this.languageCodes.push(language);
    };
    /**
     * Sets Local Storage as default.
     */
    LocaleService.prototype.useLocalStorage = function () {
        this.enableLocalStorage = true;
    };
    /**
     * Defines the preferred language.
     * Selects the current language of the browser if it has been added, else the default language.
     *
     * @param defaultLanguage The two-letter or three-letter code of the default language
     * @param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     */
    LocaleService.prototype.definePreferredLanguage = function (defaultLanguage, expiry) {
        this.expiry = expiry;
        // Parses the storage "locale" to extract the codes.
        this.parseStorage("locale");
        if (this.languageCode == "") {
            this.languageCode = defaultLanguage;
            // Verifies browser language.
            var browserLanguage = "";
            if (typeof navigator.language != "undefined") {
                browserLanguage = navigator.language;
            }
            else if (typeof navigator.userLanguage != "undefined") {
                browserLanguage = navigator.userLanguage;
            }
            else if (typeof navigator.browserLanguage != "undefined") {
                browserLanguage = navigator.browserLanguage;
            }
            else if (typeof navigator.systemLanguage != "undefined") {
                browserLanguage = navigator.systemLanguage;
            }
            // Tries to gets the current language of browser.
            if (browserLanguage != "") {
                var index = browserLanguage.indexOf("-");
                if (index != -1) {
                    browserLanguage = browserLanguage.substring(0, index); // Gets the language code.
                }
                if (this.languageCodes.length > 0 && this.languageCodes.indexOf(browserLanguage) != -1) {
                    this.languageCode = browserLanguage;
                }
            }
        }
        // Sets the default locale.
        this.setDefaultLocale();
    };
    /**
     * Defines preferred languange and country, regardless of the browser language.
     *
     * @param defaultLanguage The two-letter or three-letter code of the default language
     * @param defaultCountry The two-letter, uppercase code of the default country
     * @param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     * @param script The optional four-letter script code
     * @param numberingSystem The optional numbering system to be used
     * @param calendar The optional calendar to be used
     */
    LocaleService.prototype.definePreferredLocale = function (defaultLanguage, defaultCountry, expiry, script, numberingSystem, calendar) {
        if (script === void 0) { script = ""; }
        if (numberingSystem === void 0) { numberingSystem = ""; }
        if (calendar === void 0) { calendar = ""; }
        this.expiry = expiry;
        // Parses the storage "locale" to extract the codes & the extension.
        this.parseStorage("locale");
        if (this.languageCode == "" || this.countryCode == "") {
            this.languageCode = defaultLanguage;
            this.countryCode = defaultCountry;
            this.scriptCode = script;
            this.numberingSystem = numberingSystem;
            this.calendar = calendar;
        }
        // Sets the default locale.
        this.setDefaultLocale();
    };
    /**
     * Defines the preferred currency.
     *
     * @param defaultCurrency The three-letter code of the default currency
     */
    LocaleService.prototype.definePreferredCurrency = function (defaultCurrency) {
        // Parses the storage "currency" to extract the code.
        this.parseStorage("currency");
        if (this.currencyCode == "") {
            this.currencyCode = defaultCurrency;
        }
        // Sets the storage "currency".
        this.setStorage("currency", this.currencyCode);
    };
    /**
     * Gets the current language.
     *
     * @return The two-letter or three-letter code of the current language
     */
    LocaleService.prototype.getCurrentLanguage = function () {
        return this.languageCode;
    };
    /**
     * Gets the current country.
     *
     * @return The two-letter, uppercase code of the current country
     */
    LocaleService.prototype.getCurrentCountry = function () {
        return this.countryCode;
    };
    /**
     * Gets the current currency.
     *
     * @return The three-letter code of the current currency
     */
    LocaleService.prototype.getCurrentCurrency = function () {
        return this.currencyCode;
    };
    /**
     * Gets the script.
     *
     * @return The four-letter code of the script
     */
    LocaleService.prototype.getScript = function () {
        return this.scriptCode;
    };
    /**
     * Gets the numbering system.
     *
     * @return The numbering system
     */
    LocaleService.prototype.getNumberingSystem = function () {
        return this.numberingSystem;
    };
    /**
     * Gets the calendar.
     *
     * @return The calendar
     */
    LocaleService.prototype.getCalendar = function () {
        return this.calendar;
    };
    /**
     * Sets the current language.
     *
     * @param language The two-letter or three-letter code of the new language
     */
    LocaleService.prototype.setCurrentLanguage = function (language) {
        // Checks if the language has changed.
        if (this.languageCode != language) {
            // Assigns the value & sends an event.
            this.languageCode = language;
            this.languageCodeChanged.emit(language);
            // Sets the default locale.
            this.setDefaultLocale();
        }
    };
    /**
     * Sets the current locale.
     *
     * @param language The two-letter or three-letter code of the new language
     * @param country The two-letter, uppercase code of the new country
     * @param script The optional four-letter script code
     * @param numberingSystem The optional numbering system to be used
     * @param calendar The optional calendar to be used
     */
    LocaleService.prototype.setCurrentLocale = function (language, country, script, numberingSystem, calendar) {
        if (script === void 0) { script = ""; }
        if (numberingSystem === void 0) { numberingSystem = ""; }
        if (calendar === void 0) { calendar = ""; }
        // Checks if language, country, script or extension have changed.
        if (this.languageCode != language || this.countryCode != country || this.scriptCode != script || this.numberingSystem != numberingSystem || this.calendar != calendar) {
            // Assigns the values & sends the events.
            if (this.languageCode != language) {
                this.languageCode = language;
                this.languageCodeChanged.emit(language);
            }
            if (this.countryCode != country) {
                this.countryCode = country;
                this.countryCodeChanged.emit(country);
            }
            if (this.scriptCode != script) {
                this.scriptCode = script;
                this.scriptCodeChanged.emit(script);
            }
            if (this.numberingSystem != numberingSystem) {
                this.numberingSystem = numberingSystem;
                this.numberingSystemChanged.emit(numberingSystem);
            }
            if (this.calendar != calendar) {
                this.calendar = calendar;
                this.calendarChanged.emit(calendar);
            }
            // Sets the default locale.
            this.setDefaultLocale();
        }
    };
    /**
     * Sets the current currency.
     *
     * @param currency The three-letter code of the new currency
     */
    LocaleService.prototype.setCurrentCurrency = function (currency) {
        // Checks if the currency has changed.
        if (this.currencyCode != currency) {
            // Assigns the value & sends an event.
            this.currencyCode = currency;
            this.currencyCodeChanged.emit(currency);
            // Sets the storage "currency".
            this.setStorage("currency", this.currencyCode);
        }
    };
    /**
     * Gets the default locale.
     *
     * @return The default locale
     */
    LocaleService.prototype.getDefaultLocale = function () {
        return this.defaultLocale;
    };
    /**
     * Builds the default locale.
     */
    LocaleService.prototype.setDefaultLocale = function () {
        this.defaultLocale = this.languageCode;
        this.defaultLocale += this.scriptCode != "" ? "-" + this.scriptCode : "";
        this.defaultLocale += this.countryCode != "" ? "-" + this.countryCode : "";
        // Adds the 'u' (Unicode) extension.
        this.defaultLocale += this.numberingSystem != "" || this.calendar != "" ? "-u" : "";
        // Adds numbering system.
        this.defaultLocale += this.numberingSystem != "" ? "-nu-" + this.numberingSystem : "";
        // Adds calendar.
        this.defaultLocale += this.calendar != "" ? "-ca-" + this.calendar : "";
        // Sets the storage "locale".
        this.setStorage("locale", this.defaultLocale);
    };
    /**
     * Parses the storage to extract the codes & the extension.
     *
     * @param name The name of the storage
     */
    LocaleService.prototype.parseStorage = function (name) {
        var storage = "";
        if (this.enableLocalStorage && this.verifyLocalStorage) {
            storage = this.getLocalStorage(name);
        }
        else if (this.enableCookie && this.languageCodes.length > 0 && this.verifyCookie) {
            storage = this.getCookie(name);
        }
        if (storage != "") {
            // Looks for the 'u' (Unicode) extension.
            var index = storage.search("-u");
            if (index != -1) {
                var extensions = storage.substring(index + 1).split("-");
                switch (extensions.length) {
                    case 3:
                        if (extensions[1] == "nu") {
                            this.numberingSystem = extensions[2];
                        }
                        else if (extensions[1] == "ca") {
                            this.calendar = extensions[2];
                        }
                        break;
                    case 5:
                        this.numberingSystem = extensions[2];
                        this.calendar = extensions[4];
                        break;
                }
                // Extracts the codes.
                storage = storage.substring(0, index);
            }
            // Splits the string to each hyphen.
            var codes = storage.split("-");
            switch (codes.length) {
                case 1:
                    if (name == "locale") {
                        this.languageCode = codes[0];
                    }
                    else if (name == "currency") {
                        this.currencyCode = codes[0];
                    }
                    break;
                case 2:
                    this.languageCode = codes[0];
                    this.countryCode = codes[1];
                    break;
                case 3:
                    this.languageCode = codes[0];
                    this.scriptCode = codes[1];
                    this.countryCode = codes[2];
                    break;
            }
        }
    };
    /**
     * Checks browser support for Local Storage.
     *
     * @return True if Web Storage is supported.
     */
    LocaleService.prototype.verifyLocalStorage = function () {
        return typeof Storage != "undefined";
    };
    /**
     * Checks browser support for cookies.
     *
     * @return True if cookies are supported.
     */
    LocaleService.prototype.verifyCookie = function () {
        return typeof navigator.cookieEnabled != "undefined" && navigator.cookieEnabled;
    };
    /**
     * Sets the storage.
     *
     * @param name The name of the storage
     * @param value The value of the storage
     */
    LocaleService.prototype.setStorage = function (name, value) {
        if (this.enableLocalStorage && this.verifyLocalStorage) {
            this.setLocalStorage(name, value);
        }
        else if (this.enableCookie == true && this.languageCodes.length > 0 && this.verifyCookie) {
            this.setCookie(name, value, this.expiry);
        }
    };
    /**
     * Saves Local Storage value.
     *
     * @param name The name of the storage
     * @param value The value of the storage
     */
    LocaleService.prototype.setLocalStorage = function (name, value) {
        localStorage.setItem(name, value);
    };
    /**
     * Saves Local Storage value.
     *
     * @param name The name of the storage
     * @return The value of the storage
     */
    LocaleService.prototype.getLocalStorage = function (name) {
        // If the storage is not found, returns an empty string.
        return localStorage.getItem(name) != null ? localStorage.getItem(name) : "";
    };
    /**
     * Sets the cookie.
     *
     * @param name The name of the cookie
     * @param value The value of the cookie
     * @param days Number of days on the expiry
     */
    LocaleService.prototype.setCookie = function (name, value, days) {
        if (days != null) {
            // Adds the expiry date (in UTC time).
            var expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + expirationDate.toUTCString();
        }
        else {
            // By default, the cookie is deleted when the browser is closed.
            var expires = "";
        }
        // Creates the cookie.
        document.cookie = name + "=" + value + expires + "; path=/";
    };
    /**
     * Gets the cookie.
     *
     * @param name The name of the cookie
     * @return The value of the cookie
     */
    LocaleService.prototype.getCookie = function (name) {
        // The text to search for.
        name += "=";
        // Splits document.cookie on semicolons into an array.
        var ca = document.cookie.split(";");
        // Loops through the ca array, and reads out each value.
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == " ") {
                c = c.substring(1);
            }
            // If the cookie is found, returns the value of the cookie.
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        // If the cookie is not found, returns an empty string.
        return "";
    };
    /**
     * Reference counter for the service.
     */
    LocaleService.referenceCounter = 0;
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], LocaleService.prototype, "languageCodeChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], LocaleService.prototype, "countryCodeChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], LocaleService.prototype, "currencyCodeChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], LocaleService.prototype, "scriptCodeChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], LocaleService.prototype, "numberingSystemChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], LocaleService.prototype, "calendarChanged", void 0);
    LocaleService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], LocaleService);
    return LocaleService;
}());
exports.LocaleService = LocaleService;

//# sourceMappingURL=locale.service.js.map
