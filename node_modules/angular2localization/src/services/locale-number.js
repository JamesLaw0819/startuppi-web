/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var lang_1 = require('@angular/common/src/facade/lang');
var exceptions_1 = require('@angular/common/src/facade/exceptions');
var intl_1 = require('@angular/common/src/facade/intl');
var invalid_pipe_argument_exception_1 = require('@angular/common/src/pipes/invalid_pipe_argument_exception');
/**
 * LocaleNumber class.
 * Class to format numbers.
 */
var LocaleNumber = (function () {
    function LocaleNumber() {
    }
    LocaleNumber.format = function (pipe, defaultLocale, value, style, digits, currency, currencyAsSymbol) {
        if (currency === void 0) { currency = null; }
        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
        if (lang_1.isBlank(value)) {
            return null;
        }
        if (!lang_1.isNumber(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(pipe, value);
        }
        var minInt = 1;
        var minFraction = 0;
        var maxFraction = 3;
        var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/g;
        if (lang_1.isPresent(digits)) {
            var parts = lang_1.RegExpWrapper.firstMatch(NUMBER_FORMAT_REGEXP, digits);
            if (lang_1.isBlank(parts)) {
                throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
            }
            if (lang_1.isPresent(parts[1])) {
                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
            }
            if (lang_1.isPresent(parts[3])) {
                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
            }
            if (lang_1.isPresent(parts[5])) {
                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
            }
        }
        return intl_1.NumberFormatter.format(value, defaultLocale, style, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyAsSymbol: currencyAsSymbol
        });
    };
    return LocaleNumber;
}());
exports.LocaleNumber = LocaleNumber;

//# sourceMappingURL=locale-number.js.map
