{"version":3,"sources":["src/pipes/locale-date.pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;;AAEH,qBAAoC,eAAe,CAAC,CAAA;AACpD,qBAAsE,iCAAiC,CAAC,CAAA;AACxG,qBAA8B,iCAAiC,CAAC,CAAA;AAChE,2BAAiC,uCAAuC,CAAC,CAAA;AACzE,gDAA6C,2DAA2D,CAAC,CAAA;AAEzG,YAAY;AACZ,6BAA4B,0BAA0B,CAAC,CAAA;AAEvD;;GAEG;AAgDH;IAAA;IAqEA,CAAC;IAxDG;;;;;;;OAOG;IACI,kCAAS,GAAhB,UAAiB,KAAU,EAAE,aAAqB,EAAE,OAA8B;QAA9B,uBAA8B,GAA9B,sBAA8B;QAE9E,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAExB,MAAM,IAAI,8DAA4B,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAElE,CAAC;QAED,EAAE,CAAC,CAAC,oBAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEjC,KAAK,GAAG,kBAAW,CAAC,UAAU,CAAC,oBAAa,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QAEtE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEzB,KAAK,GAAS,kBAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEnD,CAAC;QAED,+BAA+B;QAC/B,EAAE,CAAC,CAAC,0BAAW,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAEpD,EAAE,CAAC,CAAC,6BAAgB,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE7D,OAAO,GAAW,6BAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE5E,CAAC;YAED,MAAM,CAAC,oBAAa,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QAE/D,CAAC;QAED,yCAAyC;QACzC,MAAM,CAAC,KAAK,CAAC;IAEjB,CAAC;IAEO,iCAAQ,GAAhB,UAAiB,GAAQ;QAErB,EAAE,CAAC,CAAC,aAAM,CAAC,GAAG,CAAC,IAAI,oBAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAAC,CAAC;QAEjE,EAAE,CAAC,CAAC,eAAQ,CAAC,GAAG,CAAC,IAAI,aAAM,CAAC,kBAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAAC,CAAC;QAE7E,MAAM,CAAC,KAAK,CAAC;IAEjB,CAAC;IAjEa,sBAAO,GAA8B;QAC/C,QAAQ,EAAE,UAAU;QACpB,OAAO,EAAE,OAAO;QAChB,UAAU,EAAE,YAAY;QACxB,UAAU,EAAE,QAAQ;QACpB,YAAY,EAAE,OAAO;QACrB,WAAW,EAAE,KAAK;QAClB,YAAY,EAAE,KAAK;QACnB,WAAW,EAAE,IAAI;KACpB,CAAC;IA1DN;QAAC,WAAI,CAAC;YACF,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,IAAI;SACb,CAAC;;sBAAA;IAiHF,qBAAC;AAAD,CArEA,AAqEC,IAAA;AArEY,sBAAc,iBAqE1B,CAAA","file":"src/pipes/locale-date.pipe.js","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { DateWrapper, NumberWrapper, isBlank, isDate, isString } from '@angular/common/src/facade/lang';\r\nimport { DateFormatter } from '@angular/common/src/facade/intl';\r\nimport { StringMapWrapper } from '@angular/common/src/facade/collection';\r\nimport { InvalidPipeArgumentException } from '@angular/common/src/pipes/invalid_pipe_argument_exception';\r\n\r\n// Services.\r\nimport { IntlSupport } from '../services/Intl-support';\r\n\r\n/**\r\n * 'localedate' pipe function.\r\n */\r\n@Pipe({\r\n    name: 'localedate',\r\n    pure: true\r\n})\r\n\r\n/**\r\n * LocaleDatePipe class.\r\n * Localizes dates.\r\n * \r\n * Getting the local date:\r\n * \r\n * expression | localedate[:defaultLocale[:format]]\r\n * \r\n * where 'expression' is a date object or a number (milliseconds since UTC epoch) and 'format' indicates which date/time components to include.\r\n * \r\n * For example, to get the local date, add in the template:\r\n * \r\n * {{ today | localedate:defaultLocale:'fullDate' }}\r\n * \r\n * and include in the component:\r\n * \r\n * import {LocaleService} from 'angular2localization/angular2localization';\r\n * import {LocaleDatePipe} from 'angular2localization/angular2localization';\r\n * \r\n * @Component({\r\n *     ...\r\n *     pipes: [LocaleDatePipe]\r\n * })\r\n * \r\n * export class AppComponent {\r\n * \r\n *     constructor(public locale: LocaleService) {\r\n *         ...\r\n *     }\r\n * \r\n *     // Gets the default locale.\r\n *     get defaultLocale(): string {\r\n *\r\n *         return this.locale.getDefaultLocale();\r\n *      \r\n *     }\r\n * \r\n * }\r\n * \r\n * @author Roberto Simonetti\r\n * @see Angular 2 DatePipe for further information\r\n */\r\nexport class LocaleDatePipe implements PipeTransform {\r\n\r\n    public static ALIASES: { [key: string]: String } = {\r\n        'medium': 'yMMMdjms',\r\n        'short': 'yMdjm',\r\n        'fullDate': 'yMMMMEEEEd',\r\n        'longDate': 'yMMMMd',\r\n        'mediumDate': 'yMMMd',\r\n        'shortDate': 'yMd',\r\n        'mediumTime': 'jms',\r\n        'shortTime': 'jm'\r\n    };\r\n\r\n    /**\r\n     * LocaleDatePipe transform method.\r\n     * \r\n     * @param value The date to be localized\r\n     * @param defaultLocale The default locale\r\n     * @param pattern The format of the date\r\n     * @return The locale date\r\n     */\r\n    public transform(value: any, defaultLocale: string, pattern: string = 'mediumDate'): string {\r\n\r\n        if (isBlank(value)) { return null; }\r\n\r\n        if (!this.supports(value)) {\r\n\r\n            throw new InvalidPipeArgumentException(LocaleDatePipe, value);\r\n\r\n        }\r\n\r\n        if (NumberWrapper.isNumeric(value)) {\r\n\r\n            value = DateWrapper.fromMillis(NumberWrapper.parseInt(value, 10));\r\n\r\n        } else if (isString(value)) {\r\n\r\n            value = <Date>DateWrapper.fromISOString(value);\r\n\r\n        }\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.DateTimeFormat(defaultLocale) == true) {\r\n\r\n            if (StringMapWrapper.contains(LocaleDatePipe.ALIASES, pattern)) {\r\n\r\n                pattern = <string>StringMapWrapper.get(LocaleDatePipe.ALIASES, pattern);\r\n\r\n            }\r\n\r\n            return DateFormatter.format(value, defaultLocale, pattern);\r\n\r\n        }\r\n\r\n        // Returns the date without localization.\r\n        return value;\r\n\r\n    }\r\n\r\n    private supports(obj: any): boolean {\r\n\r\n        if (isDate(obj) || NumberWrapper.isNumeric(obj)) { return true; }\r\n\r\n        if (isString(obj) && isDate(DateWrapper.fromISOString(obj))) { return true; }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}