/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var intl_1 = require('@angular/common/src/facade/intl');
// Services.
var localization_service_1 = require('../services/localization.service');
var locale_service_1 = require('../services/locale.service');
var locale_number_1 = require('../services/locale-number');
var Intl_support_1 = require('../services/Intl-support');
/**
 * 'translate' pipe function.
 */
var TranslatePipe = (function () {
    function TranslatePipe(localization, locale) {
        this.localization = localization;
        this.locale = locale;
    }
    /**
     * TranslatePipe transform method.
     *
     * @param key The key to be translated
     * @param lang The current language code for the LocalizationService
     * @return The value of translation
     */
    TranslatePipe.prototype.transform = function (key, lang) {
        // Checks the service state.
        if (this.localization.serviceState == localization_service_1.ServiceState.isReady) {
            var REGEXP = /^\d+\b/;
            var keyStr = key;
            // i18n plural.
            if (REGEXP.exec(key) != null) {
                // Tries to extract the number.
                var keyNum = parseFloat(key);
                // Tries to extract the string. 
                keyStr = key.replace(REGEXP, "");
                keyStr = keyStr.trim();
                // Checks the number & support for Intl.
                if (!isNaN(keyNum) && Intl_support_1.IntlSupport.NumberFormat(this.locale.getDefaultLocale()) == true) {
                    // Localizes the number.
                    key = key.replace(/^\d+/, locale_number_1.LocaleNumber.format(TranslatePipe, this.locale.getDefaultLocale(), keyNum, intl_1.NumberFormatStyle.Decimal, '1.0-3'));
                }
            }
            // Gets the value of translation for the key string.
            var value = this.localization.translate(keyStr);
            return key.replace(keyStr, value);
        }
        return key;
    };
    TranslatePipe = __decorate([
        core_1.Pipe({
            name: 'translate',
            pure: true
        }), 
        __metadata('design:paramtypes', [localization_service_1.LocalizationService, locale_service_1.LocaleService])
    ], TranslatePipe);
    return TranslatePipe;
}());
exports.TranslatePipe = TranslatePipe;

//# sourceMappingURL=translate.pipe.js.map
