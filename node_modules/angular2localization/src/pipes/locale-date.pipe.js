/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var lang_1 = require('@angular/common/src/facade/lang');
var intl_1 = require('@angular/common/src/facade/intl');
var collection_1 = require('@angular/common/src/facade/collection');
var invalid_pipe_argument_exception_1 = require('@angular/common/src/pipes/invalid_pipe_argument_exception');
// Services.
var Intl_support_1 = require('../services/Intl-support');
/**
 * 'localedate' pipe function.
 */
var LocaleDatePipe = (function () {
    function LocaleDatePipe() {
    }
    /**
     * LocaleDatePipe transform method.
     *
     * @param value The date to be localized
     * @param defaultLocale The default locale
     * @param pattern The format of the date
     * @return The locale date
     */
    LocaleDatePipe.prototype.transform = function (value, defaultLocale, pattern) {
        if (pattern === void 0) { pattern = 'mediumDate'; }
        if (lang_1.isBlank(value)) {
            return null;
        }
        if (!this.supports(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LocaleDatePipe, value);
        }
        if (lang_1.NumberWrapper.isNumeric(value)) {
            value = lang_1.DateWrapper.fromMillis(lang_1.NumberWrapper.parseInt(value, 10));
        }
        else if (lang_1.isString(value)) {
            value = lang_1.DateWrapper.fromISOString(value);
        }
        // Checks for support for Intl.
        if (Intl_support_1.IntlSupport.DateTimeFormat(defaultLocale) == true) {
            if (collection_1.StringMapWrapper.contains(LocaleDatePipe.ALIASES, pattern)) {
                pattern = collection_1.StringMapWrapper.get(LocaleDatePipe.ALIASES, pattern);
            }
            return intl_1.DateFormatter.format(value, defaultLocale, pattern);
        }
        // Returns the date without localization.
        return value;
    };
    LocaleDatePipe.prototype.supports = function (obj) {
        if (lang_1.isDate(obj) || lang_1.NumberWrapper.isNumeric(obj)) {
            return true;
        }
        if (lang_1.isString(obj) && lang_1.isDate(lang_1.DateWrapper.fromISOString(obj))) {
            return true;
        }
        return false;
    };
    LocaleDatePipe.ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    LocaleDatePipe = __decorate([
        core_1.Pipe({
            name: 'localedate',
            pure: true
        }), 
        __metadata('design:paramtypes', [])
    ], LocaleDatePipe);
    return LocaleDatePipe;
}());
exports.LocaleDatePipe = LocaleDatePipe;

//# sourceMappingURL=locale-date.pipe.js.map
