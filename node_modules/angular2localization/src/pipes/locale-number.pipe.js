/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var intl_1 = require('@angular/common/src/facade/intl');
// Services.
var locale_number_1 = require('../services/locale-number');
var Intl_support_1 = require('../services/Intl-support');
/**
 * 'localedecimal' pipe function.
 */
var LocaleDecimalPipe = (function () {
    function LocaleDecimalPipe() {
    }
    /**
     * LocaleDecimalPipe transform method.
     *
     * @param value The number to be localized
     * @param defaultLocale The default locale
     * @param digits The format of the number
     * @return The locale decimal
     */
    LocaleDecimalPipe.prototype.transform = function (value, defaultLocale, digits) {
        if (digits === void 0) { digits = null; }
        // Checks for support for Intl.
        if (Intl_support_1.IntlSupport.NumberFormat(defaultLocale) == true) {
            return locale_number_1.LocaleNumber.format(LocaleDecimalPipe, defaultLocale, value, intl_1.NumberFormatStyle.Decimal, digits);
        }
        // Returns the number without localization.
        return value;
    };
    LocaleDecimalPipe = __decorate([
        core_1.Pipe({
            name: 'localedecimal',
            pure: true
        }), 
        __metadata('design:paramtypes', [])
    ], LocaleDecimalPipe);
    return LocaleDecimalPipe;
}());
exports.LocaleDecimalPipe = LocaleDecimalPipe;
/**
 * 'localepercent' pipe function.
 */
var LocalePercentPipe = (function () {
    function LocalePercentPipe() {
    }
    /**
     * LocalePercentPipe transform method.
     *
     * @param value The number to be localized
     * @param defaultLocale The default locale
     * @param digits The format of the number
     * @return The locale percent
     */
    LocalePercentPipe.prototype.transform = function (value, defaultLocale, digits) {
        if (digits === void 0) { digits = null; }
        // Checks for support for Intl.
        if (Intl_support_1.IntlSupport.NumberFormat(defaultLocale) == true) {
            return locale_number_1.LocaleNumber.format(LocalePercentPipe, defaultLocale, value, intl_1.NumberFormatStyle.Percent, digits);
        }
        // Returns the number without localization.
        return value;
    };
    LocalePercentPipe = __decorate([
        core_1.Pipe({
            name: 'localepercent',
            pure: true
        }), 
        __metadata('design:paramtypes', [])
    ], LocalePercentPipe);
    return LocalePercentPipe;
}());
exports.LocalePercentPipe = LocalePercentPipe;
/**
 * 'localecurrency' pipe function.
 */
var LocaleCurrencyPipe = (function () {
    function LocaleCurrencyPipe() {
    }
    /**
     * LocaleCurrencyPipe transform method.
     *
     * @param value The number to be localized
     * @param defaultLocale The default locale
     * @param currency The current currency
     * @param symbolDisplay Indicates whether to use the currency symbol
     * @param digits The format of the number
     * @return The locale currency
     */
    LocaleCurrencyPipe.prototype.transform = function (value, defaultLocale, currency, symbolDisplay, digits) {
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        if (digits === void 0) { digits = null; }
        // Checks for support for Intl.
        if (Intl_support_1.IntlSupport.NumberFormat(defaultLocale) == true) {
            return locale_number_1.LocaleNumber.format(LocaleCurrencyPipe, defaultLocale, value, intl_1.NumberFormatStyle.Currency, digits, currency, symbolDisplay);
        }
        // Returns the number without localization & currency.
        return value + " " + currency;
    };
    LocaleCurrencyPipe = __decorate([
        core_1.Pipe({
            name: 'localecurrency',
            pure: true
        }), 
        __metadata('design:paramtypes', [])
    ], LocaleCurrencyPipe);
    return LocaleCurrencyPipe;
}());
exports.LocaleCurrencyPipe = LocaleCurrencyPipe;

//# sourceMappingURL=locale-number.pipe.js.map
